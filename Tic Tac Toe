from colorama import Fore, Style
import random

def print_board(board):
    print(" " + "-" * 8 + " ")
    for i, row in enumerate(board):
        formatted_row = [
            get_colored_cell(cell) if cell == 'X' or cell == 'O' else cell
            for cell in row
        ]
        row_string = "|" + " |".join(formatted_row) + " |" 
        row_string = row_string.ljust(9)  # Add right padding to ensure a total width of 9 characters
        print(row_string)
        if i < 2:
            print("|" + "-" * 8 + "|")
    print(" " + "-" * 8+ " ")

def get_colored_cell(cell):
    return (
        Fore.BLUE + Style.BRIGHT + cell + Style.RESET_ALL
        if cell == 'X'
        else Fore.RED + Style.BRIGHT + cell + Style.RESET_ALL
        if cell == 'O'
        else cell
    )

def check_winner(board):
    # Check rows, columns, and diagonals
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != ' ':
            return board[i][0]  # Row win
        if board[0][i] == board[1][i] == board[2][i] != ' ':
            return board[0][i]  # Column win
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return board[0][0]  # Diagonal win
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[0][2]  # Diagonal win
    return None  # No winner yet

def is_board_full(board):
    for row in board:
        if ' ' in row:
            return False  # Board is not full
    return True  # Board is full

def is_valid_move(board, row, col):
    if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' ':
        return True
    return False

def get_player_move():
    row = int(input("Enter row (0, 1, or 2): "))
    col = int(input("Enter column (0, 1, or 2): "))
    return row, col

def get_ai_move(board):
    # Implement a basic minimax algorithm
    best_score = float('-inf')
    best_move = None

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = ' '

                if score > best_score:
                    best_score = score
                    best_move = (i, j)

    return best_move

def minimax(board, depth, is_maximizing):
    scores = {'X': -1, 'O': 1, 'Tie': 0}

    winner = check_winner(board)
    if winner:
        return scores[winner]

    if is_board_full(board):
        return scores['Tie']

    if is_maximizing:
        max_score = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    max_score = max(score, max_score)
        return max_score

    else:
        min_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    min_score = min(score, min_score)
        return min_score

def tic_tac_toe_with_ai():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)

        if current_player == 'X':
            row, col = get_player_move()
        else:
            row, col = get_ai_move(board)

        if not is_valid_move(board, row, col):
            print("Invalid move. Try again.")
            continue

        board[row][col] = current_player

        winner = check_winner(board)
        if winner:
            print_board(board)
            if current_player == 'X':
                print(Fore.BLUE + "You win!" + Style.RESET_ALL)
            else:
                print(Fore.RED + "AI wins!" + Style.RESET_ALL)
            break

        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    tic_tac_toe_with_ai()
